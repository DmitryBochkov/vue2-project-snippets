'.source.js':
  
  'vue-router.js-> vue-router init(includes vuex)':
    'prefix': 'r-init',
    'body': """
    import Vue from 'vue'
    import Router from 'vue-router'
    import store from './store'
    
    Vue.use(Router)
    
    const router = new Router({
      mode: '${1:history}',
      routes: [
        $2
      ]
    })
    
    // router interceptors
    router.beforeEach((to, from, next) => {
      if (to.matched.some(r => r.meta.requireAuth)) {
        if (store.state.auth.authToken) {
          next()
        } else {
          store.dispatch('logout')
          next({
            name: 'Login'
          })
        }
      } else {
        next()
      }
    })
    
    export default router
    """
    
  'vue-router.js-> vue-router with scrollBehavior':
    'prefix': 'r-scrollBehavior',
    'body': """
    const scrollBehavior = (to, from, savedPosition) => {
      if (savedPosition) {
        // savedPosition is only available for popstate navigations.
        return savedPosition
      } else {
        const position = {}
        // new navigation.
        // scroll to anchor by returning the selector
        if (to.hash) {
          position.selector = to.hash
        }
        // check if any matched route config has meta that requires scrolling to top
        if (to.matched.some(m => m.meta.scrollToTop)) {
          // cords will be used if no selector is provided,
          // or if the selector didn't match any element.
          position.x = 0
          position.y = 0
        }
        // if the returned position is falsy or an empty object,
        // will retain current scroll position.
        return position
      }
    }
    """
  
  'vue-router.js-> router.push':
    'prefix': 'r-push',
    'body': """
    this.$router.push({
      name: '${1:routerName}',
    })
    """
    
  'vue-router.js-> router.push with params':
    'prefix': 'r-push-params',
    'body': """
    this.$router.push({
      name: '${1:routerName}',
      params: {
        ${2:paramsName}: ${3:value}
      }
    })
    """

  'vue-router.js-> router.push with query':
    'prefix': 'r-push-query',
    'body': """
    this.$router.push({
      name: '${1:routerName}',
      query: {
        ${2:queryName}: ${3:value}
      }
    })
    """
    
  'vue-router.js-> get params':
    'prefix': 'r-params',
    'body': """
    this.$route.params.${1:paramsName}
    """
    
  'vue-router.js-> get query':
    'prefix': 'r-query',
    'body': """
    this.$route.query.${1:queryName}
    """

'.text.html.vue':
  
  'vue-router.js-> Router View':
    'prefix': 'router-view',
    'body': """
    <router-view"></router-view>
    """
    
  'vue-router.js-> Router Link':
    'prefix': 'router-link',
    'body': """
    <router-link :to="{ name: '${1:routeName}', params: { ${2:property}: ${3:value}}}">$4</router-link>
    """    
